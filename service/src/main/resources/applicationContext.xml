<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://code.alibabatech.com/schema/dubbo        http://code.alibabatech.com/schema/dubbo/dubbo.xsd">
	<context:property-placeholder location="classpath:*.properties" />


	<context:component-scan base-package="com.mfl.service" />

	<!-- 集成redis -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<!-- 最大连接数 -->
		<property name="maxTotal" value="${jedis.pool.maxTotal}" />
		<!-- 最大空闲连接数 -->
		<property name="maxIdle" value="${jedis.pool.maxIdle}" />
		<!-- 最大等待时间 -->
		<property name="maxWaitMillis" value="${jedis.pool.maxWaitMillis}" />
		<!-- 在获取连接的时候检查有效性 -->
		<property name="testOnBorrow" value="${jedis.pool.testOnBorrow}" />
		<!-- 在return给pool时，是否提前进行validate操作 -->
		<property name="testOnReturn" value="${jedis.pool.testOnReturn}" />
	</bean>
	<bean id="redisConnectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${redis.host}" />
		<property name="port" value="${redis.port}" />
		<property name="password" value="${redis.password}" />
		<property name="timeout" value="${redis.timeOut}" />
	</bean>
	<bean id="stringRedisSerializer"
		class="org.springframework.data.redis.serializer.StringRedisSerializer" />
	<bean id="redisCache" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="redisConnectionFactory" />
		<property name="keySerializer" ref="stringRedisSerializer" />
		<property name="valueSerializer" ref="stringRedisSerializer" />
		<property name="hashKeySerializer" ref="stringRedisSerializer" />
		<property name="hashValueSerializer" ref="stringRedisSerializer" />
	</bean>
	<!-- end -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}"></property>
		<property name="url" value="${jdbc.url}"></property>
		<property name="username" value="${jdbc.username}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<!-- <property name="configLocation" value="classpath:mybatis-config.xml"/> -->
		<property name="mapperLocations" value="classpath*:mappers/*.xml" />
	</bean>
	<!-- DAO接口所在包名，Spring会自动查找其下的类 ,包下的类需要使用@MapperScan注解,否则容器注入会失败 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.mfl.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	<!-- 定义事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!--使用注释事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	<!-- <tx:advice id="txAdvice" transaction-manager="transactionManager"> 
		<tx:attributes> <tx:method name="find*" propagation="SUPPORTS" read-only="true"/> 
		<tx:method name="get*" propagation="SUPPORTS" read-only="true"/> <tx:method 
		name="query*" propagation="SUPPORTS" read-only="true"/> <tx:method name="insert*" 
		propagation="REQUIRED" /> <tx:method name="assign*" propagation="REQUIRED" 
		/> <tx:method name="update*" propagation="REQUIRED"/> <tx:method name="delete*" 
		propagation="SUPPORTS"/> <tx:method name="batch*" propagation="SUPPORTS"/> 
		<tx:method name="audit*" propagation="SUPPORTS"/> <tx:method name="*" read-only="true"/> 
		</tx:attributes> </tx:advice> <aop:config> <aop:pointcut id="serviceMethods" 
		expression="execution(* com.mfl.service..*.*(..))"/> <aop:advisor advice-ref="txAdvice" 
		pointcut-ref="serviceMethods"/> </aop:config> -->
</beans>